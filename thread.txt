# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    thread.txt                                         :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: mohamoha <mohamoha@student.42.fr>          +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2023/10/15 18:34:38 by mohamoha          #+#    #+#              #
#    Updated: 2023/10/21 17:55:24 by mohamoha         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

#include "fractol.h"

static void	my_pixel_put(int x, int y, t_img *img, int color)
{
	int	offset;

	offset = (y * img->line_length) + (x * (img->bits_per_pixel / 8));
	*(unsigned int *)(img->addr + offset) = color;
}

static void	mandel_vs_julia(t_complex *z, t_complex *c, t_fractal *fractal)
{	
	if (!ft_strcmp(fractal->name, "julia"))
	{
		c->x = fractal->julia_x;
		c->y = fractal->julia_y;
	}
	else
	{
		c->x = z->x;
		c->y = z->y;
	}
}

static void    pixel_handel(int x, int y, t_fractal *fractol)
{
    t_complex   z;
    t_complex   c;
    int         i;
    int         color;

    i = 0;
    z.x = (scale(x, -2, +2, 0, WIDTH) * fractol->zoom) + fractol->shift_x;
    z.y = (scale(y, +2, -2, 0, HEIGHT) * fractol->zoom) + fractol->shift_y;

	mandel_vs_julia(&z, &c, fractol);
	
    while (i < fractol->iteration)
    {
        z = sum_complex(square_complex(z), c);
        if ((z.x * z.x) + (z.y * z.y) > fractol->outer_value)
        {
            color = scale(i, BLACK, WHITE, 0, fractol->iteration);
            my_pixel_put(x, y, &fractol->img, color);
            return;
        }
        i++;
    }
    my_pixel_put(x, y, &fractol->img, WHITE);
}

static void *render_thread(void *data)
{
    t_thread_data *thread_data = (t_thread_data *)data;
    t_fractal *fractol = thread_data->fractol;

    for (int y = thread_data->start_y; y < thread_data->end_y; y++)
	{
        for (int x = 0; x < WIDTH; x++)
		{
            pixel_handel(x, y, fractol);
        }
    }

    pthread_exit(NULL);
}

void fractal_draw(t_fractal *fractol)
{
    // Define the number of threads to use (you can adjust this based on your CPU)
    int num_threads = 10; // You can experiment with different values

    pthread_t threads[num_threads];
    t_thread_data thread_data[num_threads];

    int chunk_size = HEIGHT / num_threads;

    for (int i = 0; i < num_threads; i++)
	{
        thread_data[i].fractol = fractol;
        thread_data[i].start_y = i * chunk_size;
        thread_data[i].end_y = (i + 1) * chunk_size;

        pthread_create(&threads[i], NULL, render_thread, &thread_data[i]);
    }

    for (int i = 0; i < num_threads; i++)
	{
        pthread_join(threads[i], NULL);
    }

    mlx_put_image_to_window(fractol->mlx, fractol->win, fractol->img.img, 0, 0);
}
